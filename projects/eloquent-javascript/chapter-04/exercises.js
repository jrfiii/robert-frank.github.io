////////////////////////////////////////////////////////////////////////////////
// range ///////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function range(start, end, step) {
  let output = [];
  if (start === end) {
    return output;
  } else if (step > 0) {
    for (var i = start; i <= end; i += step) {
      output.push(i);
    }
  } else if (step < 0) {
    for (var i = start; i >= end; i += step) {
      output.push(i);
    }
  } else {
    for (var i = start; i <= end; i++) {
      output.push(i);
    }
  }
  return output;
}

////////////////////////////////////////////////////////////////////////////////
// sum /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function sum(array) {
  let total = 0;
  for (var i = 0; i < array.length; i++) {
    total += array[i];
  }
  return total;
}

////////////////////////////////////////////////////////////////////////////////
// reverseArray ////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArray(arr, revArr = []) {
  if (arr.length === 0) {return revArr;}
  revArr.unshift(arr[0]);
  return reverseArray(arr.slice(1), revArr);
}

////////////////////////////////////////////////////////////////////////////////
// reverseArrayInPlace /////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArrayInPlace(arr) {
  for (let i = 0; i < Math.round((arr.length - 1) / 2); i++){
    let placehold = arr[i];
    arr[i] = arr[arr.length - 1 - i];
    arr[arr.length - 1 - i] = placehold;
  }
  return arr;
}

////////////////////////////////////////////////////////////////////////////////
// arrayToList /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function arrayToList(arr) {
  let obj = null;
  for (let i = arr.length - 1; i >= 0; i--){
    obj = {value : arr[i], rest: obj};
  }
  return obj;        
}

////////////////////////////////////////////////////////////////////////////////
// listToArray /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function listToArray(obj) {
  let arr = [];
  for (let node = obj; node; node = node.rest) {
    arr.push(node.value);
  }
  return arr;
}

////////////////////////////////////////////////////////////////////////////////
// prepend /////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function prepend(element, obj) {
  return {value: element, rest: obj};
}

////////////////////////////////////////////////////////////////////////////////
// nth /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function nth(obj, idx) {
  // return listToArray(obj)[idx];  //lowest hanging fruit solution\
  //recursive solution without converting to array.
  if (!obj) {return undefined;}
  if (idx === 0) {return obj.value;}
  return nth(obj.rest, idx - 1);
}

////////////////////////////////////////////////////////////////////////////////
// deepEqual ///////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function deepEqual(val1, val2) {
  if (typeof val1 !== 'object' || typeof val2 !== 'object') {
    return val1 === val2;
  }
  
  if (val1 === null || val2 === null) {
    return val1 === val2;
  } else if (Object.keys(val1).length !== Object.keys(val2).length) {
    return false;
  } else {
    for (let key in val1) {
      if (!val2.hasOwnProperty(key)) {return false;}
      if (!deepEqual(val1[key], val2[key])) {return false;}
    }
  }
  return true;
}

////////////////////////////////////////////////////////////////////////////////
// DON'T REMOVE THIS CODE //////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

if ((typeof process !== 'undefined') &&
  (typeof process.versions.node !== 'undefined')) {
  module.exports = {
    range,
    sum,
    reverseArray,
    reverseArrayInPlace,
    arrayToList,
    listToArray,
    prepend,
    nth,
    deepEqual,
  };
};
